Вы правы, `/var/run/secrets/kubernetes.io/serviceaccount` — это директория, а не файл конфигурации. Вот правильный способ настройки kubectl для работы с кластером изнутри пода:

## Правильная настройка kubectl

### 1. Проверьте содержимое Service Account директории

```bash
ls -la /var/run/secrets/kubernetes.io/serviceaccount/
```

Вы должны увидеть файлы:
- `token` - токен для аутентификации
- `ca.crt` - сертификат CA кластера  
- `namespace` - текущий namespace

### 2. Создайте правильный kubeconfig

```bash
# Создаем директорию для конфигурации
mkdir -p ~/.kube

# Получаем значения из Service Account
KUBE_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
KUBE_CA_CERT="/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
KUBE_NAMESPACE=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)

# Создаем kubeconfig файл
cat > ~/.kube/config << EOF
apiVersion: v1
kind: Config
clusters:
- cluster:
    certificate-authority: ${KUBE_CA_CERT}
    server: https://kubernetes.default.svc.cluster.local
  name: kubernetes
contexts:
- context:
    cluster: kubernetes
    user: serviceaccount
    namespace: ${KUBE_NAMESPACE}
  name: kubernetes
current-context: kubernetes
users:
- name: serviceaccount
  user:
    token: ${KUBE_TOKEN}
EOF
```

### 3. Альтернативный способ через переменные окружения

```bash
# Экспортируем переменные для kubectl
export KUBERNETES_SERVICE_HOST=kubernetes.default.svc.cluster.local
export KUBERNETES_SERVICE_PORT=443
export KUBE_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
export KUBE_CA_CERT=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt

# Настраиваем kubectl
kubectl config set-cluster kubernetes \
  --server=https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT} \
  --certificate-authority=${KUBE_CA_CERT}

kubectl config set-credentials serviceaccount --token=${KUBE_TOKEN}

kubectl config set-context kubernetes \
  --cluster=kubernetes \
  --user=serviceaccount \
  --namespace=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)

kubectl config use-context kubernetes
```

### 4. Еще более простой способ

```bash
# Используем встроенные переменные окружения
export KUBECONFIG=""
kubectl config set-cluster kubernetes --server=https://kubernetes.default.svc --certificate-authority=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
kubectl config set-credentials serviceaccount --token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
kubectl config set-context serviceaccount@kubernetes --cluster=kubernetes --user=serviceaccount --namespace=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)
kubectl config use-context serviceaccount@kubernetes
```

### 5. Полный скрипт для GitLab CI

```bash
#!/bin/sh
# setup-kubectl.sh

# Установка kubectl
apk add --no-cache curl
curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
chmod +x kubectl && mv kubectl /usr/local/bin/

# Настройка подключения к кластеру
mkdir -p ~/.kube

# Создание kubeconfig
KUBE_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
KUBE_NAMESPACE=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)

cat > ~/.kube/config << EOF
apiVersion: v1
kind: Config
clusters:
- cluster:
    certificate-authority: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    server: https://kubernetes.default.svc.cluster.local
  name: kubernetes
contexts:
- context:
    cluster: kubernetes
    user: serviceaccount
    namespace: ${KUBE_NAMESPACE}
  name: kubernetes
current-context: kubernetes
users:
- name: serviceaccount
  user:
    token: ${KUBE_TOKEN}
EOF

# Проверка подключения
kubectl cluster-info
kubectl get pods
```

### 6. Для GitLab CI/CD pipeline

```yaml
deploy:
  image: alpine:3.20.6
  before_script:
    - apk add --no-cache curl
    - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    - chmod +x kubectl && mv kubectl /usr/local/bin/
    - mkdir -p ~/.kube
    - |
      cat > ~/.kube/config << EOF
      apiVersion: v1
      kind: Config
      clusters:
      - cluster:
          certificate-authority: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          server: https://kubernetes.default.svc.cluster.local
        name: kubernetes
      contexts:
      - context:
          cluster: kubernetes
          user: serviceaccount
          namespace: $(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)
        name: kubernetes
      current-context: kubernetes
      users:
      - name: serviceaccount
        user:
          token: $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
      EOF
  script:
    - kubectl get pods
    - kubectl apply -f your-deployment.yaml
```

После выполнения этих команд kubectl будет правильно настроен для работы с кластером изнутри пода.
