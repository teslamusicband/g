"""
Test runner для отладки Vault AppRole аутентификации
"""
import logging
import requests

log = logging.getLogger(__name__)

def test_approle_auth():
    """
    Тестирует AppRole аутентификацию с текущими настройками master'а
    """
    try:
        # Получаем конфигурацию vault из master'а
        vault_config = __opts__.get('vault', {})
        
        if not vault_config:
            return {'error': 'No vault configuration found on master'}
        
        log.info("Vault config: %s", vault_config)
        
        # Проверяем наличие необходимых параметров
        auth_config = vault_config.get('auth', {})
        if auth_config.get('method') != 'approle':
            return {'error': f'Auth method is {auth_config.get("method")}, expected approle'}
        
        role_id = auth_config.get('role_id')
        secret_id = auth_config.get('secret_id')
        
        if not role_id:
            return {'error': 'role_id not found in vault.auth configuration'}
        
        log.info("Using role_id: %s", role_id)
        log.info("Secret_id present: %s", bool(secret_id))
        
        # Пытаемся аутентифицироваться
        vault_url = vault_config.get('url')
        if not vault_url:
            return {'error': 'vault.url not configured'}
        
        url = f"{vault_url}/v1/auth/approle/login"
        payload = {'role_id': role_id}
        
        if secret_id:
            payload['secret_id'] = secret_id
        
        # Проверяем namespace если есть
        namespace = vault_config.get('namespace')
        headers = {}
        if namespace:
            headers['X-Vault-Namespace'] = namespace
        
        verify = vault_config.get('verify', True)
        
        log.info("Making request to: %s", url)
        log.info("Payload: %s", payload)
        log.info("Headers: %s", headers)
        
        response = requests.post(
            url,
            json=payload,
            headers=headers,
            verify=verify,
            timeout=30
        )
        
        log.info("Response status: %s", response.status_code)
        log.info("Response text: %s", response.text)
        
        if response.status_code == 200:
            token_data = response.json()
            return {
                'success': True,
                'token_info': {
                    'accessor': token_data.get('auth', {}).get('accessor'),
                    'policies': token_data.get('auth', {}).get('policies'),
                    'lease_duration': token_data.get('auth', {}).get('lease_duration')
                }
            }
        else:
            return {
                'error': f'Authentication failed with status {response.status_code}',
                'response': response.text
            }
            
    except Exception as e:
        log.error("Error in test_approle_auth: %s", e, exc_info=True)
        return {'error': f'Exception: {str(e)}'}

def debug_token_generation(minion_id, signature=None):
    """
    Отладка процесса генерации токена
    """
    try:
        log.info("Debug token generation for minion: %s", minion_id)
        
        # Сначала проверим аутентификацию
        auth_result = test_approle_auth()
        if 'error' in auth_result:
            return auth_result
        
        # Попробуем импортировать и вызвать оригинальный runner
        try:
            import salt.runners.vault as vault_runner
            log.info("Vault runner imported successfully")
            
            # Проверим какие функции доступны
            available_functions = [func for func in dir(vault_runner) if not func.startswith('_')]
            log.info("Available vault runner functions: %s", available_functions)
            
            if hasattr(vault_runner, 'generate_token'):
                log.info("generate_token function found")
                # Попробуем вызвать с тестовыми параметрами
                result = vault_runner.generate_token(
                    minion_id=minion_id,
                    signature=signature or 'test_signature',
                    impersonated_by_master=True
                )
                return {'success': True, 'result': result}
            else:
                return {'error': 'generate_token function not found in vault runner'}
                
        except ImportError as e:
            return {'error': f'Cannot import vault runner: {e}'}
        except Exception as e:
            log.error("Error calling generate_token: %s", e, exc_info=True)
            return {'error': f'Error calling generate_token: {e}'}
            
    except Exception as e:
        log.error("Error in debug_token_generation: %s", e, exc_info=True)
        return {'error': f'Exception: {str(e)}'}
