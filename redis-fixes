# 1. Исправленный ExternalSecret-redis-password-masterauth.yml
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: redis-password-masterauth
  namespace: redis
spec:
  refreshInterval: "15s"
  secretStoreRef:
    name: secret-backend
    kind: SecretStore
  target:
    name: redis-password-masterauth
  data:  # ИСПРАВЛЕНО: было "date" вместо "data"
    - secretKey: masterauth
      remoteRef:
        key: accounts
        property: redis

---
# 2. Исправленный ExternalSecret-redis-password-requirepass.yml
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: redis-password-requirepass
  namespace: redis
spec:
  refreshInterval: "15s"
  secretStoreRef:
    name: secret-backend
    kind: SecretStore
  target:
    name: redis-password-requirepass
  data:  # ИСПРАВЛЕНО: было "date" вместо "data"
    - secretKey: requirepass
      remoteRef:
        key: accounts
        property: redis

---
# 3. Исправленный redis-exporter-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: redis-exporter
  namespace: redis
  labels:
    app: redis
spec:
  ports:
    - name: redis-exporter
      port: 9121
      protocol: TCP
      targetPort: 9121
      nodePort: 30121
  selector:
    app: redis
  type: NodePort
  externalTrafficPolicy: Local

---
# 4. Исправленный redis-statefulset_NEW.yml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: redis
spec:
  selector:
    matchLabels:
      app: redis  # ИСПРАВЛЕНО: отступы
  serviceName: redis
  podManagementPolicy: "Parallel"
  replicas: 6
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: some.company.com/catalog/redis:latest
        env:
        - name: REDIS_PASSWORD_MASTERAUTH
          valueFrom:
            secretKeyRef:
              name: redis-password-masterauth
              key: masterauth
        - name: REDIS_PASSWORD_REQUIREPASS  # ИСПРАВЛЕНО: убрал дублирование "env:"
          valueFrom:
            secretKeyRef:
              name: redis-password-requirepass
              key: requirepass
        # УДАЛЕНО: некорректные секции envFrom
        ports:
        - containerPort: 6379
          name: client
        - containerPort: 16379
          name: cluster
        resources:
          requests:
            memory: "4Gi"
            cpu: "0.5"
          limits:
            memory: "16Gi"
            cpu: "2"
        volumeMounts:  # ИСПРАВЛЕНО: перенесено под resources
        - name: redis-config
          mountPath: "/usr/local/etc/redis/redis.conf"  # ИСПРАВЛЕНО: было "mouthPath"
          subPath: redis.conf
          readOnly: true
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - "redis-cli -h $(hostname) ping"
          initialDelaySeconds: 15
          timeoutSeconds: 5
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - "redis-cli -h $(hostname) ping"
          initialDelaySeconds: 20
          timeoutSeconds: 3
      - name: redis-exporter
        image: some.company.com/catalog/redis-exporter:latest
        env:
        - name: REDIS_PASSWORD_MASTERAUTH
          valueFrom:
            secretKeyRef:
              name: redis-password-masterauth
              key: masterauth
        - name: REDIS_PASSWORD_REQUIREPASS  # ИСПРАВЛЕНО: убрал дублирование "env:"
          valueFrom:
            secretKeyRef:
              name: redis-password-requirepass
              key: requirepass
        # УДАЛЕНО: некорректные секции envFrom
        securityContext:
          runAsUser: 59000
          runAsGroup: 59000
          allowPrivilegeEscalation: false  # ИСПРАВЛЕНО: было "allowPrivelegeEscalation"
          capabilities:
            drop:
            - ALL
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 9121
      volumes:
      - name: redis-config
        configMap:  # ДОБАВЛЕНО: указание типа volume
          name: redis-cluster-config
          items:
          - key: redis-config
            path: redis.conf

---
# 5. Альтернативный подход с одним ExternalSecret
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: redis-passwords
  namespace: redis
spec:
  refreshInterval: "15s"
  secretStoreRef:
    name: secret-backend
    kind: SecretStore
  target:
    name: redis-passwords
  data:
    - secretKey: masterauth
      remoteRef:
        key: accounts
        property: redis
    - secretKey: requirepass
      remoteRef:
        key: accounts
        property: redis

---
# 6. Упрощенный StatefulSet с единым секретом
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: redis
spec:
  selector:
    matchLabels:
      app: redis
  serviceName: redis
  podManagementPolicy: "Parallel"
  replicas: 6
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: some.company.com/catalog/redis:latest
        env:
        - name: REDIS_PASSWORD_MASTERAUTH
          valueFrom:
            secretKeyRef:
              name: redis-passwords
              key: masterauth
        - name: REDIS_PASSWORD_REQUIREPASS
          valueFrom:
            secretKeyRef:
              name: redis-passwords
              key: requirepass
        ports:
        - containerPort: 6379
          name: client
        - containerPort: 16379
          name: cluster
        resources:
          requests:
            memory: "4Gi"
            cpu: "0.5"
          limits:
            memory: "16Gi"
            cpu: "2"
        volumeMounts:
        - name: redis-config
          mountPath: "/usr/local/etc/redis/redis.conf"
          subPath: redis.conf
          readOnly: true
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - "redis-cli -h $(hostname) ping"
          initialDelaySeconds: 15
          timeoutSeconds: 5
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - "redis-cli -h $(hostname) ping"
          initialDelaySeconds: 20
          timeoutSeconds: 3
      - name: redis-exporter
        image: some.company.com/catalog/redis-exporter:latest
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-passwords
              key: requirepass
        securityContext:
          runAsUser: 59000
          runAsGroup: 59000
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 9121
      volumes:
      - name: redis-config
        configMap:
          name: redis-cluster-config
          items:
          - key: redis-config
            path: redis.conf
