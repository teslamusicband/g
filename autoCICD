–î–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ CD-–≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–ª–æ–∂–Ω–æ–π –≥–µ—Ç–µ—Ä–æ–≥–µ–Ω–Ω–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–µ, –≤–∫–ª—é—á–∞—é—â–µ–π —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–¥—Ö–æ–¥—ã:

## –°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

**Semantic Versioning (SemVer)** —Å –∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π –ø–æ–¥ CD:
- `MAJOR.MINOR.PATCH-BUILD_NUMBER`
- –ù–∞–ø—Ä–∏–º–µ—Ä: `2.1.3-1456` –≥–¥–µ 1456 - –Ω–æ–º–µ—Ä –±–∏–ª–¥–∞ –∏–∑ CI/CD

**–î–ª—è –≥—Ä—É–ø–ø —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:**
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–¥–∏–Ω—ã–π –≤–µ—Ä—Å–∏–æ–Ω–Ω—ã–π —Ç–µ–≥ –¥–ª—è –≤—Å–µ–π –≥—Ä—É–ø–ø—ã (umbrella versioning)
- –û—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –º–æ–≥—É—Ç –∏–º–µ—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–∞—Ç—á-–≤–µ—Ä—Å–∏–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

## –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è

### 1. –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏—è–º–∏
```yaml
# version-manifest.yaml
application_group: "my-platform"
version: "2.1.3-1456"
components:
  spark-jobs:
    - job-processor: "2.1.3-1456"
    - data-analyzer: "2.1.3-1456"
  databases:
    postgres_schema: "v2.1.3"
    clickhouse_schema: "v2.1.3"
  services:
    user-service: "2.1.3-1456"
    payment-service: "2.1.3-1456"
```

### 2. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
**–ú–æ–Ω–æ—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π** –¥–ª—è —Ç–µ—Å–Ω–æ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:
- –ï–¥–∏–Ω–æ–µ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
- –ê—Ç–æ–º–∞—Ä–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
- –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è —Ä–µ–ª–∏–∑–æ–≤

**–ú—É–ª—å—Ç–∏—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π** —Å dependency management:
- –û—Ç–¥–µ–ª—å–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –¥–ª—è –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
- Dependency matrix –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
- Contract testing –º–µ–∂–¥—É —Å–µ—Ä–≤–∏—Å–∞–º–∏

## –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º–∞–º–∏ –ë–î

### PostgreSQL
```sql
-- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
CREATE TABLE schema_versions (
    version VARCHAR(50) PRIMARY KEY,
    applied_at TIMESTAMP DEFAULT NOW(),
    rollback_sql TEXT
);
```

### ClickHouse
```sql
-- –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è ClickHouse
CREATE TABLE default.schema_versions (
    version String,
    applied_at DateTime DEFAULT now(),
    rollback_sql String
) ENGINE = MergeTree()
ORDER BY version;
```

## JAR-–∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã

### –î–ª—è –º–Ω–æ–≥–æ–∫–ª–∞—Å—Å–æ–≤—ã—Ö JAR
```xml
<!-- pom.xml -->
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-jar-plugin</artifactId>
    <configuration>
        <archive>
            <manifestEntries>
                <Implementation-Version>${project.version}</Implementation-Version>
                <Build-Number>${env.BUILD_NUMBER}</Build-Number>
                <Git-Commit>${env.GIT_COMMIT}</Git-Commit>
            </manifestEntries>
        </archive>
    </configuration>
</plugin>
```

### –î–ª—è –æ–¥–Ω–æ–∫–ª–∞—Å—Å–æ–≤—ã—Ö JAR
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Maven/Gradle –º–æ–¥—É–ª–∏
- –û—Ç–¥–µ–ª—å–Ω–æ–µ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
- –û–±—â–∏–π parent POM –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏

## CI/CD Pipeline

### –ü—Ä–∏–º–µ—Ä Jenkins/GitLab CI
```yaml
stages:
  - version-check
  - build
  - test
  - deploy-staging
  - deploy-production

variables:
  VERSION: "${CI_COMMIT_TAG:-${CI_PIPELINE_ID}}"
  
version-check:
  script:
    - echo "Building version: $VERSION"
    - update-version-manifest.sh $VERSION
```

## Deployment –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è

### Kubernetes
```yaml
# deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: spark-job-processor
  labels:
    version: "2.1.3-1456"
    component-group: "data-processing"
spec:
  template:
    metadata:
      labels:
        version: "2.1.3-1456"
    spec:
      containers:
      - name: spark-job
        image: "my-registry/spark-job:2.1.3-1456"
```

### SystemD Services
```ini
[Unit]
Description=Java Service v%i
After=network.target

[Service]
Type=simple
Environment=VERSION=2.1.3-1456
ExecStart=/usr/bin/java -jar /opt/myapp/service-${VERSION}.jar
```

## Best Practices

1. **Feature Flags** –¥–ª—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–≥–æ rollout –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π
2. **Blue-Green Deployment** –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤  
3. **Canary Releases** –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
4. **Automated Rollback** –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º
5. **Dependency Lock Files** –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º—ã—Ö —Å–±–æ—Ä–æ–∫
6. **Contract Testing** –º–µ–∂–¥—É —Å–µ—Ä–≤–∏—Å–∞–º–∏
7. **Health Checks** —Å –≤–µ—Ä—Å–∏–æ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π

## –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–µ—Ä—Å–∏–π

```yaml
# Prometheus –º–µ—Ç—Ä–∏–∫–∏
version_info{service="user-service", version="2.1.3-1456"} 1
schema_version{database="postgres", version="v2.1.3"} 1
```

–≠—Ç–æ—Ç –ø–æ–¥—Ö–æ–¥ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ç—Ä–∞—Å—Å–∏—Ä—É–µ–º–æ—Å—Ç—å, –æ—Ç–∫–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–∏–º –≤–µ—Ä—Å–∏—è–º –∏ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã.










#############################################












–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö, –ø–æ—á–µ–º—É BUILD_NUMBER –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–µ–Ω –≤ CD.

## –ü—Ä–æ–±–ª–µ–º–∞ –±–µ–∑ BUILD_NUMBER

–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é:
```
–í–µ—Ä—Å–∏—è –≤ –∫–æ–¥–µ: 2.1.3
Git –∫–æ–º–º–∏—Ç: abc123f
```

**–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏:**
- –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–ª–∞–µ—Ç –∫–æ–º–º–∏—Ç —Å –≤–µ—Ä—Å–∏–µ–π `2.1.3`
- CI —Å–æ–±–∏—Ä–∞–µ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç `myapp-2.1.3.jar`
- –ß–µ—Ä–µ–∑ —á–∞—Å –¥—Ä—É–≥–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –±–∞–≥ –≤ —Ç–æ–º –∂–µ –∫–æ–º–º–∏—Ç–µ
- CI —Å–Ω–æ–≤–∞ —Å–æ–±–∏—Ä–∞–µ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç `myapp-2.1.3.jar` 

**‚ùå –ü—Ä–æ–±–ª–µ–º–∞:** –£ –Ω–∞—Å –¥–≤–∞ —Ä–∞–∑–Ω—ã—Ö JAR-—Ñ–∞–π–ª–∞ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –∏–º–µ–Ω–µ–º!

## BUILD_NUMBER —Ä–µ—à–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã

### 1. –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏
```
–ü–µ—Ä–≤–∞—è —Å–±–æ—Ä–∫–∞:  myapp-2.1.3-1456.jar
–í—Ç–æ—Ä–∞—è —Å–±–æ—Ä–∫–∞:  myapp-2.1.3-1457.jar
```
–¢–µ–ø–µ—Ä—å –∫–∞–∂–¥—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç —É–Ω–∏–∫–∞–ª–µ–Ω –∏ —Ç—Ä–∞—Å—Å–∏—Ä—É–µ–º.

### 2. –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
```bash
# –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ –≤–µ—Ä—Å–∏—è
java -jar myapp-2.1.3-1456.jar

# –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è
java -jar myapp-2.1.3-1457.jar
```
**DevOps –º–æ–∂–µ—Ç —Ç–æ—á–Ω–æ —Å–∫–∞–∑–∞—Ç—å:** "–í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –≤–µ—Ä—Å–∏—è –∏–∑ –±–∏–ª–¥–∞ #1456, –∞ –ø—Ä–æ–±–ª–µ–º–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤ –±–∏–ª–¥–µ #1457"

### 3. –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏

**–î–∏–∞–ª–æ–≥ –±–µ–∑ BUILD_NUMBER:**
- QA: "–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª –≤–µ—Ä—Å–∏—é 2.1.3, –±–∞–≥ –µ—Å—Ç—å"
- Dev: "–°—Ç—Ä–∞–Ω–Ω–æ, —É –º–µ–Ω—è 2.1.3 —Ä–∞–±–æ—Ç–∞–µ—Ç"
- QA: "–£ –º–µ–Ω—è —Ç–æ–∂–µ 2.1.3..."
- üòµ‚Äçüí´ **–ü—É—Ç–∞–Ω–∏—Ü–∞ –Ω–∞ 30 –º–∏–Ω—É—Ç**

**–î–∏–∞–ª–æ–≥ —Å BUILD_NUMBER:**
- QA: "–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª –≤–µ—Ä—Å–∏—é 2.1.3-1456, –±–∞–≥ –µ—Å—Ç—å"
- Dev: "–ê —É –º–µ–Ω—è –ª–æ–∫–∞–ª—å–Ω–æ 2.1.3-1457, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å"
- QA: "–ü–æ–Ω—è–ª, –∂–¥—É –Ω–æ–≤—ã–π –±–∏–ª–¥"
- ‚úÖ **–ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞ –∑–∞ 30 —Å–µ–∫—É–Ω–¥**

### 4. Rollback —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–º

```yaml
# Kubernetes deployment
containers:
- image: myapp:2.1.3-1456  # –¢–æ—á–Ω–æ –∑–Ω–∞–µ–º, —á—Ç–æ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º
```

–ë–µ–∑ BUILD_NUMBER –æ—Ç–∫–∞—Ç –º–æ–∂–µ—Ç –≤–∑—è—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –≤–µ—Ä—Å–∏—é –∏–∑ —Ç–æ–≥–æ –∂–µ —Ç–µ–≥–∞.

### 5. Debugging –≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ

```
–õ–æ–≥–∏ Spark Job:     [2024-08-01] Starting job version 2.1.3-1456
–õ–æ–≥–∏ PostgreSQL:    [2024-08-01] Migration applied by app 2.1.3-1456  
–õ–æ–≥–∏ Java Service:  [2024-08-01] Service started version 2.1.3-1456
```

**–í–∏–¥–∏–º –ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç–∏–Ω—É:** –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –æ–¥–∏–Ω –±–∏–ª–¥, –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ –≤ —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤–µ—Ä—Å–∏–π.

## –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä –∏–∑ –∂–∏–∑–Ω–∏

**–°–∏—Ç—É–∞—Ü–∏—è:** –ü—è—Ç–Ω–∏—Ü–∞, 18:00, –ø–∞–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞

```bash
# –ö–æ–º–∞–Ω–¥–∞ –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–Ω—è—Ç—å, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
kubectl get pods -o wide

# –ë–µ–∑ BUILD_NUMBER:
user-service-xxx    myapp:2.1.3    # –ö–∞–∫–∞—è –∏–º–µ–Ω–Ω–æ –≤–µ—Ä—Å–∏—è? ü§∑‚Äç‚ôÇÔ∏è
payment-service-yyy myapp:2.1.3    # –û–¥–∏–Ω–∞–∫–æ–≤–∞—è –ª–∏ —Å user-service? ü§∑‚Äç‚ôÇÔ∏è

# –° BUILD_NUMBER:
user-service-xxx    myapp:2.1.3-1456    # –ß–µ—Ç–∫–∞—è –≤–µ—Ä—Å–∏—è ‚úÖ
payment-service-yyy myapp:2.1.3-1455    # –†–∞–∑–Ω—ã–µ –±–∏–ª–¥—ã! –í–æ—Ç –ø—Ä–æ–±–ª–µ–º–∞! üéØ
```

**–ë–µ–∑ BUILD_NUMBER:** –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ–ª–∞ –±—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤, –≤—ã—è—Å–Ω—è—è –ø—Ä–æ–±–ª–µ–º—É  
**–° BUILD_NUMBER:** –ø—Ä–æ–±–ª–µ–º–∞ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞ 5 –º–∏–Ω—É—Ç

## BUILD_NUMBER = —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã

- **–î–ª—è DevOps:** —Ç–æ—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ deployment'–∞–º–∏
- **–î–ª—è QA:** —á–µ—Ç–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å
- **–î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤:** –±—ã—Å—Ç—Ä—ã–π debugging
- **–î–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:** –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–ª–∏–∑–æ–≤

BUILD_NUMBER –¥–µ–ª–∞–µ—Ç –≤–∞—à—É CD-—Å–∏—Å—Ç–µ–º—É **–¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π** –≤–º–µ—Å—Ç–æ **—Ö–∞–æ—Ç–∏—á–Ω–æ–π**.














######################################################













# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π BUILD_NUMBER –¥–ª—è GitLab CI + Gradle 8 + JDK 17

## 1. Gradle 8 - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞

### gradle.properties (–∫–æ—Ä–Ω–µ–≤–æ–π —Ñ–∞–π–ª)
```properties
# gradle.properties
version=2.1.3
buildNumber=local
```

### build.gradle (–∫–æ—Ä–Ω–µ–≤–æ–π)
```gradle
// build.gradle
plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.0' apply false
    id 'io.spring.dependency-management' version '1.1.0' apply false
}

allprojects {
    group = 'com.company'
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ—Ä—Å–∏–∏
    version = "${project.version}-${project.findProperty('buildNumber') ?: 'local'}"
    
    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    
    java {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤ JAR
    jar {
        enabled = false // Spring Boot –∏—Å–ø–æ–ª—å–∑—É–µ—Ç bootJar
    }
    
    bootJar {
        archiveFileName = "${project.name}-${version}.jar"
        
        manifest {
            attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': version,
                'Build-Number': project.findProperty('buildNumber') ?: 'local',
                'Build-Time': new Date().format("yyyy-MM-dd HH:mm:ss"),
                'Built-By': System.getProperty('user.name'),
                'Java-Version': System.getProperty('java.version')
            )
        }
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ Git –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    task addGitInfo {
        doLast {
            try {
                def gitCommit = 'git rev-parse HEAD'.execute().text.trim()
                def gitBranch = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
                
                bootJar {
                    manifest {
                        attributes(
                            'Git-Commit': gitCommit,
                            'Git-Branch': gitBranch
                        )
                    }
                }
            } catch (Exception e) {
                logger.warn("Could not get git info: ${e.message}")
            }
        }
    }
    
    bootJar.dependsOn addGitInfo
}
```

### –ú–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è—é—Ç)
```gradle
// user-service/build.gradle
dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
}

// –≤–µ—Ä—Å–∏—è –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ build.gradle
```

## 2. GitLab CI - –ø–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è

### .gitlab-ci.yml
```yaml
# .gitlab-ci.yml
image: gradle:8.5-jdk17

variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  GRADLE_USER_HOME: "$CI_PROJECT_DIR/.gradle"
  BUILD_NUMBER: "$CI_PIPELINE_ID"

cache:
  paths:
    - .gradle/wrapper
    - .gradle/caches

stages:
  - build
  - test
  - package
  - deploy-staging
  - deploy-production

before_script:
  - export GRADLE_USER_HOME=`pwd`/.gradle
  - chmod +x ./gradlew

build:
  stage: build
  script:
    - echo "Building version with BUILD_NUMBER=$BUILD_NUMBER"
    - ./gradlew clean build -PbuildNumber=$BUILD_NUMBER --info
  artifacts:
    paths:
      - "*/build/libs/*.jar"
      - "build/version.txt"
    expire_in: 1 day
    reports:
      junit: "*/build/test-results/test/TEST-*.xml"
  only:
    - main
    - develop
    - merge_requests

test:
  stage: test
  script:
    - ./gradlew test -PbuildNumber=$BUILD_NUMBER
  artifacts:
    reports:
      junit: "*/build/test-results/test/TEST-*.xml"
  coverage: '/Total.*?([0-9]{1,3})%/'

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤
package:
  stage: package
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ Gradle
    - VERSION=$(./gradlew properties -PbuildNumber=$BUILD_NUMBER | grep "^version:" | awk '{print $2}')
    - echo "Packaging version: $VERSION"
    - echo $VERSION > build/version.txt
    
    # –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
    - |
      for service in user-service payment-service data-processor; do
        if [ -f "$service/build/libs/$service-$VERSION.jar" ]; then
          echo "Building Docker image for $service:$VERSION"
          docker build -f $service/Dockerfile -t $CI_REGISTRY_IMAGE/$service:$VERSION .
          docker push $CI_REGISTRY_IMAGE/$service:$VERSION
          
          # –¢–µ–≥–∞–µ–º –∫–∞–∫ latest –¥–ª—è –≤–µ—Ç–∫–∏ main
          if [ "$CI_COMMIT_REF_NAME" = "main" ]; then
            docker tag $CI_REGISTRY_IMAGE/$service:$VERSION $CI_REGISTRY_IMAGE/$service:latest
            docker push $CI_REGISTRY_IMAGE/$service:latest
          fi
        fi
      done
  artifacts:
    paths:
      - build/version.txt
  only:
    - main
    - develop

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π –≤ staging
deploy-staging:
  stage: deploy-staging
  image: bitnami/kubectl:latest
  before_script:
    - kubectl config use-context $KUBE_CONTEXT_STAGING
  script:
    - VERSION=$(cat build/version.txt)
    - echo "Deploying version $VERSION to staging"
    
    # Helm deployment —Å –∞–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π –≤–µ—Ä—Å–∏–∏
    - |
      helm upgrade --install myapp-staging ./helm-chart \
        --namespace staging \
        --create-namespace \
        --set image.tag=$VERSION \
        --set image.repository=$CI_REGISTRY_IMAGE \
        --set environment=staging \
        --wait --timeout=300s
        
    # –û–±–Ω–æ–≤–ª—è–µ–º SystemD —Å–µ—Ä–≤–∏—Å—ã –Ω–∞ VM
    - |
      ssh -o StrictHostKeyChecking=no $STAGING_SERVER "
        systemctl stop myapp@*
        wget $CI_REGISTRY_IMAGE/artifacts/$VERSION/myapp-$VERSION.jar -O /opt/myapp/myapp-$VERSION.jar
        systemctl start myapp@$VERSION
        systemctl enable myapp@$VERSION
      "
  environment:
    name: staging
    url: https://staging.company.com
  only:
    - main
    - develop

# –†—É—á–Ω–æ–π –¥–µ–ø–ª–æ–π –≤ –ø—Ä–æ–¥–∞–∫—à–Ω
deploy-production:
  stage: deploy-production
  image: bitnami/kubectl:latest
  before_script:
    - kubectl config use-context $KUBE_CONTEXT_PROD
  script:
    - VERSION=$(cat build/version.txt)
    - echo "Deploying version $VERSION to production"
    
    # –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–µ–ø–ª–æ–µ–≤
    - |
      psql $DATABASE_URL -c "
        INSERT INTO deployments (version, environment, deployed_by, deployed_at) 
        VALUES ('$VERSION', 'production', '$GITLAB_USER_LOGIN', NOW())
      "
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º –ë–î
    - |
      # PostgreSQL –º–∏–≥—Ä–∞—Ü–∏–∏
      psql $DATABASE_URL -c "
        INSERT INTO schema_versions (version, applied_at) 
        VALUES ('$VERSION', NOW())
        ON CONFLICT (version) DO NOTHING
      "
      
      # ClickHouse –º–∏–≥—Ä–∞—Ü–∏–∏  
      clickhouse-client --host $CLICKHOUSE_HOST --query "
        INSERT INTO default.schema_versions (version, applied_at) 
        VALUES ('$VERSION', now())
      "
    
    # Kubernetes deployment
    - |
      helm upgrade --install myapp-prod ./helm-chart \
        --namespace production \
        --set image.tag=$VERSION \
        --set image.repository=$CI_REGISTRY_IMAGE \
        --set environment=production \
        --set replicas=3 \
        --wait --timeout=600s
        
    # Spark Jobs –≤ K8s
    - |
      kubectl apply -f - <<EOF
      apiVersion: sparkoperator.k8s.io/v1beta2
      kind: SparkApplication
      metadata:
        name: data-processor-$BUILD_NUMBER
        namespace: production
      spec:
        image: $CI_REGISTRY_IMAGE/data-processor:$VERSION
        sparkVersion: "3.4.0"
        type: Scala
        mode: cluster
        mainClass: "com.company.DataProcessor"
        mainApplicationFile: "local:///opt/spark/jars/data-processor-$VERSION.jar"
      EOF
  environment:
    name: production
    url: https://app.company.com
  when: manual
  only:
    - main
```

## 3. Dockerfile –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞

### user-service/Dockerfile
```dockerfile
FROM openjdk:17-jre-slim

ARG VERSION
ENV VERSION=${VERSION}

WORKDIR /app

# –ö–æ–ø–∏—Ä—É–µ–º JAR —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º
COPY user-service/build/libs/user-service-*.jar app.jar

# –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–∑–∞
LABEL version="${VERSION}"
LABEL service="user-service"
LABEL build-number="${BUILD_NUMBER}"

EXPOSE 8080

ENTRYPOINT ["java", "-jar", "app.jar"]
```

## 4. Helm Chart –¥–ª—è K8s

### helm-chart/values.yaml
```yaml
# values.yaml
image:
  repository: registry.gitlab.com/company/myapp
  tag: "" # –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ CI
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 8080

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: nginx
  hosts:
    - host: myapp.company.com
      paths: ["/"]

resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 500m
    memory: 512Mi

autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
```

### helm-chart/templates/deployment.yaml
```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}
  labels:
    app: {{ .Chart.Name }}
    version: {{ .Values.image.tag }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
spec:
  replicas: {{ .Values.replicaCount | default 2 }}
  selector:
    matchLabels:
      app: {{ .Chart.Name }}
      version: {{ .Values.image.tag }}
  template:
    metadata:
      labels:
        app: {{ .Chart.Name }}
        version: {{ .Values.image.tag }}
      annotations:
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ—Å—Ç–∞—Ä—Ç –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤–µ—Ä—Å–∏–∏
        rollme: {{ randAlphaNum 5 | quote }}
    spec:
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.repository }}/user-service:{{ .Values.image.tag }}"
        ports:
        - containerPort: 8080
        env:
        - name: VERSION
          value: {{ .Values.image.tag | quote }}
        - name: ENVIRONMENT  
          value: {{ .Values.environment | default "development" }}
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /actuator/ready
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        resources:
          {{- toYaml .Values.resources | nindent 12 }}
```

## 5. SystemD Template –¥–ª—è VM —Å–µ—Ä–≤–∏—Å–æ–≤

### /etc/systemd/system/myapp@.service
```ini
[Unit]
Description=My App Service %i
After=network.target
Wants=network-online.target

[Service]
Type=simple
User=myapp
Group=myapp
WorkingDirectory=/opt/myapp

Environment=VERSION=%i
Environment=JAVA_OPTS=-Xms512m -Xmx1g -XX:+UseG1GC

ExecStart=/usr/bin/java $JAVA_OPTS -jar /opt/myapp/myapp-%i.jar
ExecStop=/bin/kill -TERM $MAINPID

Restart=always
RestartSec=10
KillMode=mixed
KillSignal=SIGTERM
TimeoutStopSec=30

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
StandardOutput=journal
StandardError=journal
SyslogIdentifier=myapp-%i

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
NoNewPrivileges=true
PrivateTmp=true
ProtectSystem=strict
ProtectHome=true
ReadWritePaths=/opt/myapp/logs

[Install]
WantedBy=multi-user.target
```

## 6. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–µ—Ä—Å–∏–π

### application.yml (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏)
```yaml
# src/main/resources/application.yml
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  info:
    build:
      enabled: true
    git:
      mode: full
    env:
      enabled: true

info:
  app:
    name: '@project.name@'
    description: '@project.description@'
    version: '@project.version@'
    build-number: '${BUILD_NUMBER:unknown}'
```

### Prometheus –º–µ—Ç—Ä–∏–∫–∏ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
```java
// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –∫–∞–∂–¥—ã–π —Å–µ—Ä–≤–∏—Å
@Component
public class VersionInfoMetrics {
    
    @Value("${info.app.version:unknown}")
    private String version;
    
    @Value("${BUILD_NUMBER:unknown}")
    private String buildNumber;
    
    @PostConstruct
    public void init() {
        Gauge.builder("version_info")
            .description("Application version info")
            .tag("version", version)
            .tag("build_number", buildNumber)
            .tag("service", getClass().getPackage().getImplementationTitle())
            .register(Metrics.globalRegistry)
            .set(1);
    }
}
```

## –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –∏–∑ 20 —á–µ–ª–æ–≤–µ–∫

**–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ (19 —á–µ–ª–æ–≤–µ–∫):**
- –ü–∏—à—É—Ç –∫–æ–¥ –∫–∞–∫ –æ–±—ã—á–Ω–æ –≤ —Å–≤–æ–∏—Ö –º–æ–¥—É–ª—è—Ö
- `./gradlew bootRun` - –ª–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
- –í–µ—Ä—Å–∏–∏ —Å BUILD_NUMBER –ø–æ—è–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
- –ù–∏–∫–∞–∫–∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è

**DevOps (1 —á–µ–ª–æ–≤–µ–∫):**
- –ù–∞—Å—Ç—Ä–æ–∏–ª GitLab CI –æ–¥–∏–Ω —Ä–∞–∑
- –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—É—é —Ç—Ä–∞—Å—Å–∏—Ä—É–µ–º–æ—Å—Ç—å –≤—Å–µ—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ deployment'—ã –≤–æ –≤—Å–µ —Å—Ä–µ–¥—ã
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–µ—Ä—Å–∏–π out-of-the-box

**–†–µ–∑—É–ª—å—Ç–∞—Ç:**
- –ö–∞–∂–¥—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç —É–Ω–∏–∫–∞–ª–µ–Ω: `user-service-2.1.3-1456.jar`
- –ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±–µ–∑ —É—á–∞—Å—Ç–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
- –ß–µ—Ç–∫–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–µ—Ä—Å–∏–π –≤ K8s, VM, –∏ –ª–æ–≥–∞—Ö
- –ë—ã—Å—Ç—Ä—ã–π debugging –∏ –Ω–∞–¥–µ–∂–Ω—ã–µ rollback'–∏

–í—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ GitLab CI!















##########################################













# –°–±–æ—Ä–∫–∞, –¥–µ–ø–ª–æ–π Docker-–æ–±—Ä–∞–∑–æ–≤ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ArgoCD —Å BUILD_NUMBER

## 1. GitLab CI - —Å–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤ —Å –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º

### –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π .gitlab-ci.yml
```yaml
stages:
  - build
  - package
  - update-manifests
  - deploy

variables:
  BUILD_NUMBER: "$CI_PIPELINE_ID"
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"

# –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
build:
  stage: build
  image: gradle:8.5-jdk17
  script:
    - ./gradlew clean build -PbuildNumber=$BUILD_NUMBER
    - echo "$(./gradlew properties -PbuildNumber=$BUILD_NUMBER | grep '^version:' | awk '{print $2}')" > VERSION
  artifacts:
    paths:
      - "*/build/libs/*.jar"
      - VERSION
    expire_in: 1 day

# –°–±–æ—Ä–∫–∞ –∏ push Docker –æ–±—Ä–∞–∑–æ–≤
package:
  stage: package
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - export VERSION=$(cat VERSION)
    - echo "Building images with version: $VERSION"
  script:
    # –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    - |
      for service in user-service payment-service data-processor; do
        echo "Building $service:$VERSION"
        
        # Dockerfile —Å multi-stage build
        docker build \
          --build-arg VERSION=$VERSION \
          --build-arg BUILD_NUMBER=$BUILD_NUMBER \
          --build-arg SERVICE_NAME=$service \
          -f docker/Dockerfile.$service \
          -t $CI_REGISTRY_IMAGE/$service:$VERSION \
          -t $CI_REGISTRY_IMAGE/$service:$BUILD_NUMBER \
          .
          
        # Push –æ–±–µ–∏—Ö —Ç–µ–≥–æ–≤
        docker push $CI_REGISTRY_IMAGE/$service:$VERSION
        docker push $CI_REGISTRY_IMAGE/$service:$BUILD_NUMBER
        
        # Latest —Ç–æ–ª—å–∫–æ –¥–ª—è main –≤–µ—Ç–∫–∏
        if [ "$CI_COMMIT_REF_NAME" = "main" ]; then
          docker tag $CI_REGISTRY_IMAGE/$service:$VERSION $CI_REGISTRY_IMAGE/$service:latest
          docker push $CI_REGISTRY_IMAGE/$service:latest
        fi
      done
  artifacts:
    paths:
      - VERSION

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç–æ–≤ –¥–ª—è ArgoCD
update-manifests:
  stage: update-manifests
  image: alpine/git:latest
  before_script:
    - apk add --no-cache yq
    - git config --global user.email "ci@company.com"
    - git config --global user.name "GitLab CI"
  script:
    - export VERSION=$(cat VERSION)
    - echo "Updating manifests with version: $VERSION"
    
    # –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞–º–∏
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/company/k8s-manifests.git
    - cd k8s-manifests
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏–∏ –≤ values —Ñ–∞–π–ª–∞—Ö –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ä–µ–¥
    - |
      for env in staging production; do
        echo "Updating $env environment"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º Helm values –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        yq eval ".image.tag = \"$VERSION\"" -i environments/$env/user-service/values.yaml
        yq eval ".image.tag = \"$VERSION\"" -i environments/$env/payment-service/values.yaml
        
        # –û–±–Ω–æ–≤–ª—è–µ–º SparkApplication –º–∞–Ω–∏—Ñ–µ—Å—Ç—ã
        yq eval ".spec.image = \"$CI_REGISTRY_IMAGE/data-processor:$VERSION\"" -i environments/$env/spark-jobs/data-processor.yaml
        yq eval ".metadata.name = \"data-processor-$BUILD_NUMBER\"" -i environments/$env/spark-jobs/data-processor.yaml
        yq eval ".spec.mainApplicationFile = \"local:///opt/spark/jars/data-processor-$VERSION.jar\"" -i environments/$env/spark-jobs/data-processor.yaml
        
        # –û–±–Ω–æ–≤–ª—è–µ–º ConfigMap —Å –≤–µ—Ä—Å–∏–æ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        cat > environments/$env/configmaps/version-info.yaml <<EOF
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: version-info
          namespace: $env
        data:
          APP_VERSION: "$VERSION"
          BUILD_NUMBER: "$BUILD_NUMBER"
          GIT_COMMIT: "$CI_COMMIT_SHA"
          DEPLOYED_AT: "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
        EOF
      done
    
    # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    - git add .
    - git commit -m "chore: update images to version $VERSION (build $BUILD_NUMBER)" || exit 0
    - git push origin main
  only:
    - main
    - develop
```

## 2. Docker –æ–±—Ä–∞–∑—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π

### docker/Dockerfile.user-service (–æ–±—ã—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å)
```dockerfile
FROM openjdk:17-jre-slim

ARG VERSION
ARG BUILD_NUMBER
ARG SERVICE_NAME

ENV VERSION=${VERSION}
ENV BUILD_NUMBER=${BUILD_NUMBER}
ENV SERVICE_NAME=${SERVICE_NAME}

# –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
LABEL version="${VERSION}"
LABEL build-number="${BUILD_NUMBER}"
LABEL service="${SERVICE_NAME}"
LABEL git-commit="${CI_COMMIT_SHA}"

WORKDIR /app

# –ö–æ–ø–∏—Ä—É–µ–º JAR
COPY ${SERVICE_NAME}/build/libs/${SERVICE_NAME}-${VERSION}.jar app.jar

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD curl -f http://localhost:8080/actuator/health || exit 1

EXPOSE 8080

ENTRYPOINT ["java", "-jar", "app.jar"]
```

### docker/Dockerfile.data-processor (Spark –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ)
```dockerfile
# –ë–∞–∑–æ–≤—ã–π Spark –æ–±—Ä–∞–∑
FROM apache/spark:3.4.0-scala2.12-java17-python3-ubuntu

ARG VERSION
ARG BUILD_NUMBER

ENV VERSION=${VERSION}
ENV BUILD_NUMBER=${BUILD_NUMBER}

# –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
LABEL version="${VERSION}"
LABEL build-number="${BUILD_NUMBER}"
LABEL service="data-processor"
LABEL type="spark-application"

USER root

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/*

# –ö–æ–ø–∏—Ä—É–µ–º JAR –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
COPY data-processor/build/libs/data-processor-${VERSION}.jar /opt/spark/jars/data-processor-${VERSION}.jar

# –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
COPY data-processor/src/main/resources/spark-defaults.conf /opt/spark/conf/
COPY data-processor/src/main/resources/log4j2.properties /opt/spark/conf/

# –°–æ–∑–¥–∞–µ–º —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
RUN ln -sf /opt/spark/jars/data-processor-${VERSION}.jar /opt/spark/jars/data-processor.jar

USER spark

WORKDIR /opt/spark/work-dir
```

## 3. ArgoCD Application –º–∞–Ω–∏—Ñ–µ—Å—Ç—ã

### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è k8s-manifests
```
k8s-manifests/
‚îú‚îÄ‚îÄ argocd-apps/
‚îÇ   ‚îú‚îÄ‚îÄ user-service.yaml
‚îÇ   ‚îú‚îÄ‚îÄ payment-service.yaml
‚îÇ   ‚îî‚îÄ‚îÄ spark-jobs.yaml
‚îú‚îÄ‚îÄ environments/
‚îÇ   ‚îú‚îÄ‚îÄ staging/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ user-service/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ values.yaml
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Chart.yaml
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ payment-service/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ values.yaml  
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Chart.yaml
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ spark-jobs/
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ data-processor.yaml
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ kustomization.yaml
‚îÇ   ‚îî‚îÄ‚îÄ production/
‚îÇ       ‚îî‚îÄ‚îÄ ... (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ staging)
‚îî‚îÄ‚îÄ helm-charts/
    ‚îú‚îÄ‚îÄ microservice/
    ‚îî‚îÄ‚îÄ spark-job/
```

### argocd-apps/user-service.yaml
```yaml
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: user-service-staging
  namespace: argocd
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: default
  source:
    repoURL: https://gitlab.com/company/k8s-manifests.git
    targetRevision: HEAD
    path: environments/staging/user-service
    helm:
      valueFiles:
        - values.yaml
  destination:
    server: https://kubernetes.default.svc
    namespace: staging
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
    retry:
      limit: 3
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 3m
---
apiVersion: argoproj.io/v1alpha1  
kind: Application
metadata:
  name: user-service-production
  namespace: argocd
spec:
  project: default
  source:
    repoURL: https://gitlab.com/company/k8s-manifests.git
    targetRevision: HEAD
    path: environments/production/user-service
    helm:
      valueFiles:
        - values.yaml
  destination:
    server: https://kubernetes.default.svc
    namespace: production
  syncPolicy:
    # –ü—Ä–æ–¥–∞–∫—à–Ω —Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    syncOptions:
      - CreateNamespace=true
```

### argocd-apps/spark-jobs.yaml
```yaml
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: spark-jobs-staging
  namespace: argocd
spec:
  project: default
  source:
    repoURL: https://gitlab.com/company/k8s-manifests.git
    targetRevision: HEAD
    path: environments/staging/spark-jobs
  destination:
    server: https://kubernetes.default.svc
    namespace: staging
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application  
metadata:
  name: spark-jobs-production
  namespace: argocd
spec:
  project: default
  source:
    repoURL: https://gitlab.com/company/k8s-manifests.git
    targetRevision: HEAD
    path: environments/production/spark-jobs
  destination:
    server: https://kubernetes.default.svc
    namespace: production
  syncPolicy:
    # –†—É—á–Ω–æ–π sync –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω–∞
    syncOptions:
      - CreateNamespace=true
```

## 4. SparkApplication –º–∞–Ω–∏—Ñ–µ—Å—Ç—ã —Å –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º

### environments/staging/spark-jobs/data-processor.yaml
```yaml
apiVersion: sparkoperator.k8s.io/v1beta2
kind: SparkApplication
metadata:
  name: data-processor-1456  # –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
  namespace: staging
  labels:
    version: "2.1.3-1456"     # –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    app: data-processor
    environment: staging
spec:
  type: Scala
  mode: cluster
  image: registry.gitlab.com/company/myapp/data-processor:2.1.3-1456  # –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  imagePullPolicy: Always
  
  mainClass: com.company.dataprocessor.DataProcessorApp
  mainApplicationFile: local:///opt/spark/jars/data-processor-2.1.3-1456.jar  # –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  
  sparkVersion: "3.4.0"
  
  restartPolicy:
    type: OnFailure
    onFailureRetries: 3
    onFailureRetryInterval: 10
    onSubmissionFailureRetries: 5
    onSubmissionFailureRetryInterval: 20
  
  # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Spark
  sparkConf:
    "spark.sql.adaptive.enabled": "true"
    "spark.sql.adaptive.coalescePartitions.enabled": "true"
    "spark.serializer": "org.apache.spark.serializer.KryoSerializer"
    "spark.app.version": "2.1.3-1456"  # –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  
  # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –≤–µ—Ä—Å–∏–µ–π
  env:
    - name: APP_VERSION
      value: "2.1.3-1456"  # –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    - name: BUILD_NUMBER
      value: "1456"        # –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    - name: ENVIRONMENT
      value: "staging"
  
  driver:
    cores: 1
    coreLimit: "1200m"
    memory: "2g"
    labels:
      version: "2.1.3-1456"  # –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    serviceAccount: spark-driver
    envFrom:
      - configMapRef:
          name: version-info
  
  executor:
    cores: 2
    instances: 3
    memory: "4g"
    labels:
      version: "2.1.3-1456"  # –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    envFrom:
      - configMapRef:
          name: version-info
  
  # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
  monitoring:
    exposeDriverMetrics: true
    exposeExecutorMetrics: true
    prometheus:
      jmxExporterJar: "/opt/spark/jars/jmx_prometheus_javaagent-0.17.0.jar"
      port: 8090
```

### environments/staging/spark-jobs/kustomization.yaml
```yaml
apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization

resources:
  - data-processor.yaml

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ–º—ã–µ –ª–µ–π–±–ª—ã –∫–æ –≤—Å–µ–º —Ä–µ—Å—É—Ä—Å–∞–º
commonLabels:
  managed-by: argocd
  component: spark-jobs
  environment: staging

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–º–µ–Ω–∞ –∏–º–µ–Ω –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
nameSuffix: -staging

# ConfigMap Generator –¥–ª—è –≤–µ—Ä—Å–∏–æ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
configMapGenerator:
  - name: spark-config
    literals:
      - spark.app.name=data-processor
      - spark.executor.instances=3
      - spark.driver.memory=2g
      - spark.executor.memory=4g
```

## 5. Helm Chart –¥–ª—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤

### environments/staging/user-service/values.yaml
```yaml
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è CI/CD
image:
  repository: registry.gitlab.com/company/myapp/user-service
  tag: "2.1.3-1456"  # –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è GitLab CI
  pullPolicy: Always

replicaCount: 2

service:
  type: ClusterIP
  port: 8080

ingress:
  enabled: true
  className: nginx
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
  hosts:
    - host: user-service-staging.company.com
      paths:
        - path: /
          pathType: Prefix

resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 500m
    memory: 512Mi

# –í–µ—Ä—Å–∏–æ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
versionInfo:
  version: "2.1.3-1456"     # –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  buildNumber: "1456"       # –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  environment: "staging"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
env:
  - name: APP_VERSION
    value: "2.1.3-1456"     # –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  - name: BUILD_NUMBER  
    value: "1456"           # –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  - name: ENVIRONMENT
    value: "staging"

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ConfigMap —Å –≤–µ—Ä—Å–∏–æ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
envFrom:
  - configMapRef:
      name: version-info

# Probes —Å —É—á–µ—Ç–æ–º –≤–µ—Ä—Å–∏–∏
livenessProbe:
  httpGet:
    path: /actuator/health
    port: 8080
  initialDelaySeconds: 60
  periodSeconds: 30

readinessProbe:
  httpGet:
    path: /actuator/ready
    port: 8080
  initialDelaySeconds: 30
  periodSeconds: 10

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π restart –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤–µ—Ä—Å–∏–∏
podAnnotations:
  version: "2.1.3-1456"     # –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  buildNumber: "1456"       # –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
```

## 6. ArgoCD Workflow

### –ü—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–ø–ª–æ—è:

1. **GitLab CI —Å–æ–±–∏—Ä–∞–µ—Ç –æ–±—Ä–∞–∑—ã:**
   ```bash
   docker build -t registry/user-service:2.1.3-1456
   docker push registry/user-service:2.1.3-1456
   ```

2. **GitLab CI –æ–±–Ω–æ–≤–ª—è–µ—Ç –º–∞–Ω–∏—Ñ–µ—Å—Ç—ã:**
   ```bash
   yq eval ".image.tag = \"2.1.3-1456\"" -i values.yaml
   git commit -m "chore: update to 2.1.3-1456"
   git push
   ```

3. **ArgoCD –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç:**
   - Staging: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ 3 –º–∏–Ω—É—Ç—ã
   - Production: —Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

4. **SparkApplication –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç—Å—è:**
   ```yaml
   # –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è —É–¥–∞–ª—è–µ—Ç—Å—è
   kubectl delete sparkapplication data-processor-1455
   
   # –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Å–æ–∑–¥–∞–µ—Ç—Å—è
   kubectl apply -f data-processor-1456.yaml
   ```

## 7. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–µ—Ä—Å–∏–π

### Prometheus –º–µ—Ç—Ä–∏–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
```yaml
# –ú–µ—Ç—Ä–∏–∫–∏ –æ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
app_version_info{version="2.1.3-1456", service="user-service"} 1

# –ú–µ—Ç—Ä–∏–∫–∏ –æ—Ç SparkApplication
spark_application_info{version="2.1.3-1456", job="data-processor"} 1

# –ú–µ—Ç—Ä–∏–∫–∏ –æ—Ç ArgoCD
argocd_app_info{version="2.1.3-1456", app="user-service-staging"} 1
```

### Dashboard –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:
```yaml
# ConfigMap –¥–ª—è Grafana
apiVersion: v1
kind: ConfigMap
metadata:
  name: version-dashboard
data:
  dashboard.json: |
    {
      "dashboard": {
        "title": "Application Versions",
        "panels": [
          {
            "title": "Current Versions by Service",
            "type": "table",
            "targets": [
              {
                "expr": "app_version_info",
                "format": "table"
              }
            ]
          }
        ]
      }
    }
```

## –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã:

1. **–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫** –ø—É—à–∏—Ç –∫–æ–¥ –≤ GitLab
2. **GitLab CI** –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
   - –°–æ–±–∏—Ä–∞–µ—Ç JAR —Å –≤–µ—Ä—Å–∏–µ–π `2.1.3-1456`
   - –°–æ–∑–¥–∞–µ—Ç Docker –æ–±—Ä–∞–∑—ã —Å —Ç–µ–≥–æ–º `2.1.3-1456`
   - –û–±–Ω–æ–≤–ª—è–µ—Ç –º–∞–Ω–∏—Ñ–µ—Å—Ç—ã –≤ k8s-manifests —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
3. **ArgoCD** –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
   - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç staging —Å—Ä–µ–¥—É
   - –ñ–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è production
4. **Kubernetes** —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç:
   - –û–±—ã—á–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã —á–µ—Ä–µ–∑ Helm charts
   - SparkApplication —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏
5. **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥** –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –≤–µ—Ä—Å–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏

–í—Å—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –ø–æ–ª–Ω—É—é —Ç—Ä–∞—Å—Å–∏—Ä—É–µ–º–æ—Å—Ç—å –≤–µ—Ä—Å–∏–π!






#################################################










# –°—Ö–µ–º–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–π

## 1. –ö–ª—é—á–µ–≤–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç: update-manifests stage –≤ GitLab CI

–≠—Ç–æ **—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –∑–≤–µ–Ω–æ** –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –ò–º–µ–Ω–Ω–æ –∑–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–º–µ–Ω–∞ –≤–µ—Ä—Å–∏–π –≤–æ –≤—Å–µ—Ö –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞—Ö:

```yaml
# –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ö–∞–Ω–∏–∑–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
update-manifests:
  stage: update-manifests
  image: alpine/git:latest
  before_script:
    - apk add --no-cache yq  # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å YAML
    - git config --global user.email "ci@company.com"
    - git config --global user.name "GitLab CI"
  script:
    - export VERSION=$(cat VERSION)  # 2.1.3-1456
    - echo "Updating manifests with version: $VERSION"
    
    # üîÑ –ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–ï: –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞–º–∏
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/company/k8s-manifests.git
    - cd k8s-manifests
    
    # üîÑ –ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–ï: –ó–∞–º–µ–Ω—è–µ–º –≤–µ—Ä—Å–∏–∏ –≤ Helm values
    - |
      for env in staging production; do
        # Helm charts –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        yq eval ".image.tag = \"$VERSION\"" -i environments/$env/user-service/values.yaml
        yq eval ".image.tag = \"$VERSION\"" -i environments/$env/payment-service/values.yaml
        
        # SparkApplication –º–∞–Ω–∏—Ñ–µ—Å—Ç—ã  
        yq eval ".spec.image = \"$CI_REGISTRY_IMAGE/data-processor:$VERSION\"" -i environments/$env/spark-jobs/data-processor.yaml
        yq eval ".metadata.name = \"data-processor-$BUILD_NUMBER\"" -i environments/$env/spark-jobs/data-processor.yaml
        yq eval ".spec.mainApplicationFile = \"local:///opt/spark/jars/data-processor-$VERSION.jar\"" -i environments/$env/spark-jobs/data-processor.yaml
      done
    
    # üîÑ –ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–ï: –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Git
    - git add .
    - git commit -m "chore: update images to version $VERSION (build $BUILD_NUMBER)"
    - git push origin main
```

## 2. –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ö–µ–º–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

### –§–∞–∑–∞ 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
```mermaid
graph TD
    A[Git Push –≤ main] --> B[GitLab CI Pipeline]
    B --> C[BUILD_NUMBER = CI_PIPELINE_ID]
    C --> D[VERSION = 2.1.3-1456]
    D --> E[Gradle Build —Å -PbuildNumber=1456]
    E --> F[JAR: user-service-2.1.3-1456.jar]
```

### –§–∞–∑–∞ 2: –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤
```mermaid
graph TD
    A[JAR Files Ready] --> B[Docker Build]
    B --> C[Image: registry/user-service:2.1.3-1456]
    C --> D[Docker Push]
    D --> E[Images Available in Registry]
```

### –§–∞–∑–∞ 3: –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç–æ–≤ (–∫–ª—é—á–µ–≤–∞—è!)
```mermaid
graph TD
    A[Docker Images Pushed] --> B[update-manifests Stage]
    B --> C[Clone k8s-manifests Repo]
    C --> D[YQ Replace Versions in YAML]
    D --> E[Git Commit + Push]
    E --> F[ArgoCD Detects Changes]
    F --> G[Auto Sync to K8s]
```

## 3. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –º–µ—Å—Ç–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

### 3.1 Helm Values –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
**–î–û –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è** (`environments/staging/user-service/values.yaml`):
```yaml
image:
  repository: registry.gitlab.com/company/myapp/user-service
  tag: "2.1.3-1455"  # —Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è
```

**–ö–æ–º–∞–Ω–¥–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:**
```bash
yq eval ".image.tag = \"2.1.3-1456\"" -i environments/staging/user-service/values.yaml
```

**–ü–û–°–õ–ï –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:**
```yaml
image:
  repository: registry.gitlab.com/company/myapp/user-service  
  tag: "2.1.3-1456"  # üîÑ –ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–û!
```

### 3.2 SparkApplication –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
**–î–û –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è** (`environments/staging/spark-jobs/data-processor.yaml`):
```yaml
apiVersion: sparkoperator.k8s.io/v1beta2
kind: SparkApplication
metadata:
  name: data-processor-1455  # —Å—Ç–∞—Ä—ã–π build number
spec:
  image: registry/data-processor:2.1.3-1455  # —Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è
  mainApplicationFile: local:///opt/spark/jars/data-processor-2.1.3-1455.jar
```

**–ö–æ–º–∞–Ω–¥—ã –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:**
```bash
# –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è (–¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏)
yq eval ".metadata.name = \"data-processor-1456\"" -i data-processor.yaml

# –û–±–Ω–æ–≤–ª—è–µ–º Docker –æ–±—Ä–∞–∑
yq eval ".spec.image = \"registry/data-processor:2.1.3-1456\"" -i data-processor.yaml

# –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ JAR
yq eval ".spec.mainApplicationFile = \"local:///opt/spark/jars/data-processor-2.1.3-1456.jar\"" -i data-processor.yaml
```

**–ü–û–°–õ–ï –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:**
```yaml
apiVersion: sparkoperator.k8s.io/v1beta2
kind: SparkApplication
metadata:
  name: data-processor-1456  # üîÑ –ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–û!
spec:
  image: registry/data-processor:2.1.3-1456  # üîÑ –ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–û!  
  mainApplicationFile: local:///opt/spark/jars/data-processor-2.1.3-1456.jar  # üîÑ –ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–û!
```

### 3.3 ConfigMap —Å –≤–µ—Ä—Å–∏–æ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
**–ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è ConfigMap:**
```bash
# –°–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π ConfigMap —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏
cat > environments/staging/configmaps/version-info.yaml <<EOF
apiVersion: v1
kind: ConfigMap
metadata:
  name: version-info
  namespace: staging
data:
  APP_VERSION: "2.1.3-1456"      # üîÑ –ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–û!
  BUILD_NUMBER: "1456"           # üîÑ –ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–û!
  GIT_COMMIT: "$CI_COMMIT_SHA"   # üîÑ –ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–û!
  DEPLOYED_AT: "$(date -u +%Y-%m-%dT%H:%M:%SZ)"  # üîÑ –ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–û!
EOF
```

## 4. –¶–µ–ø–æ—á–∫–∞ —Ä–µ–∞–∫—Ü–∏–π –ø–æ—Å–ª–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

### ArgoCD –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Git:
```yaml
# ArgoCD Application —Å–ª–µ–¥–∏—Ç –∑–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º k8s-manifests
spec:
  source:
    repoURL: https://gitlab.com/company/k8s-manifests.git
    targetRevision: HEAD  # üîÑ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    path: environments/staging/user-service
  syncPolicy:
    automated:
      prune: true
      selfHeal: true  # üîÑ –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
```

### Kubernetes –ø–æ–ª—É—á–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç—ã:
```yaml
# Deployment –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç—Å—è —Å –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–µ–π
spec:
  template:
    metadata:
      labels:
        version: "2.1.3-1456"  # üîÑ –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –æ—Ç ArgoCD
    spec:
      containers:
      - name: user-service
        image: "registry/user-service:2.1.3-1456"  # üîÑ –ù–æ–≤—ã–π –æ–±—Ä–∞–∑
        env:
        - name: APP_VERSION
          value: "2.1.3-1456"  # üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
```

## 5. –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

### 5.1 YQ - –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∑–∞–º–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏–π –≤ YAML
```bash
# –°–∏–Ω—Ç–∞–∫—Å–∏—Å YQ –¥–ª—è —Ç–æ—á–µ—á–Ω–æ–π –∑–∞–º–µ–Ω—ã
yq eval ".path.to.field = \"new-value\"" -i file.yaml

# –ü—Ä–∏–º–µ—Ä—ã –∏–∑ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã:
yq eval ".image.tag = \"$VERSION\"" -i values.yaml
yq eval ".spec.image = \"$REGISTRY/$SERVICE:$VERSION\"" -i sparkapplication.yaml
yq eval ".metadata.name = \"$SERVICE-$BUILD_NUMBER\"" -i sparkapplication.yaml
```

### 5.2 Git –∫–∞–∫ —Ç—Ä–∏–≥–≥–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
```bash
# GitLab CI –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–º–º–∏—Ç–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
git add .
git commit -m "chore: update images to version $VERSION (build $BUILD_NUMBER)"
git push origin main

# ArgoCD –≤–∏–¥–∏—Ç –Ω–æ–≤—ã–π –∫–æ–º–º–∏—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
# Kubernetes –ø–æ–ª—É—á–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç—ã
```

### 5.3 –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫ –≤–µ—Ä—Å–∏–π
```bash
# –í—Å–µ –≤–µ—Ä—Å–∏–∏ –±–µ—Ä—É—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö CI/CD
VERSION=$(cat VERSION)                    # 2.1.3-1456
BUILD_NUMBER=$CI_PIPELINE_ID             # 1456  
CI_REGISTRY_IMAGE=$CI_REGISTRY_IMAGE     # registry.gitlab.com/company/myapp
```

## 6. –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

```
T+0:00   Developer pushes code
T+0:01   GitLab CI starts (BUILD_NUMBER=1456)
T+0:05   Gradle builds JARs with version 2.1.3-1456
T+0:08   Docker builds images with tag 2.1.3-1456
T+0:10   Images pushed to registry
T+0:12   update-manifests stage starts
T+0:13   YQ updates all YAML files with new versions
T+0:14   Git push to k8s-manifests repository
T+0:15   ArgoCD detects changes in k8s-manifests
T+0:16   ArgoCD starts sync to staging environment
T+0:18   Kubernetes pulls new images 2.1.3-1456
T+0:20   Pods restart with new version
T+0:22   SparkApplication data-processor-1456 created
T+0:25   All services running with version 2.1.3-1456
```

## –ö–ª—é—á–µ–≤–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ —ç—Ç–æ–π —Å—Ö–µ–º—ã:

**–û–¥–∏–Ω –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∞–≤–¥—ã** - BUILD_NUMBER –∏–∑ GitLab CI –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–µ—Ä—Å–∏—é –≤–µ–∑–¥–µ:
- –í JAR —Ñ–∞–π–ª–∞—Ö: `user-service-2.1.3-1456.jar`
- –í Docker –æ–±—Ä–∞–∑–∞—Ö: `registry/user-service:2.1.3-1456` 
- –í Kubernetes –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞—Ö: `image.tag: "2.1.3-1456"`
- –í SparkApplication: `name: data-processor-1456`
- –í –ª–æ–≥–∞—Ö –∏ –º–µ—Ç—Ä–∏–∫–∞—Ö: `version="2.1.3-1456"`

–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞—é—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –±–µ–∑ —É—á–∞—Å—Ç–∏—è —á–µ–ª–æ–≤–µ–∫–∞!
